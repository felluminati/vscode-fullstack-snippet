{
  "Express Router Method": {
    "prefix": "ex-router-method",
    "description": "Express Router Method",
    "body": [
      "router.${1:get}('${2:/}', async (req, res, next) => {",
      "\ttry {",
      "\t\t$0",
      "\t\tres.${3:json}();",
      "\t} catch (err) {",
      "\t\tnext(err)",
      "\t}",
      "})"
    ]
  },
  "React Class Component": {
    "prefix": "rcc",
    "description": "React Class Component",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:ComponentName} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>$0</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:ComponentName}"
    ]
  },
  "React Functional Component": {
    "prefix": "rfc",
    "description": "React Functional Component",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:ComponentName} = () => {",
      "\treturn (",
      "\t\t<div>$0</div>",
      "\t)",
      "}",
      "",
      "export default ${1:ComponentName}"
    ]
  },
  "Sequel Model Definition": {
    "prefix": "smd",
    "description": "Sequelize model definition",
    "body": [
      "const Sequelize = require('sequelize')",
      "const db = require(${1:db path)",
      "",
      "const ${2:ModelName} = db.define(${3:modelString}, {",
      "\t${4:columnName}: {",
      "\t\ttype: Sequelize.${5:dataType}",
      "\t}",
      "})",
      "",
      "module.exports = ${2:ModelName}"
    ]
  },
  "Redux Action Type Creator": {
    "prefix": "ratc",
    "description": "Redux Action Type and Creator",
    "body": [
      "export const ${1:ACTION_NAME} = '${1:ACTION_NAME}'",
      "",
      "",
      "export const ${2:ActionCreatorName} = (${3:argument}) => ({",
      "\ttype: ${1:ACTION_NAME},",
      "\t$3{argument}",
      "})",
      ""
    ]
  },
  "Redux Thunk Creator": {
    "prefix": "rtc",
    "description": "Redux Thunk Creator",
    "body": [
      "export const ${1:thunkFunctionName = () => {",
      "\treturn async dispatch => {",
      "\t\ttry {"
    ]
  }
}
