{
  "Express Router Method": {
    "prefix": "exp-router-method",
    "description": "Express Router Method",
    "body": [
      "router.${1:get}('${2:/}', async (req, res, next) => {",
      "\ttry {",
      "\t\t${0}",
      "\t\tres.${3:json}()",
      "\t} catch (err) {",
      "\t\tnext(err)",
      "\t}",
      "})"
    ]
  },
  "React Class Component": {
    "prefix": "react-cc",
    "description": "React Class Component",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:ComponentName} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>$0</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:ComponentName}"
    ]
  },
  "React Functional Component": {
    "prefix": "react-fc",
    "description": "React Functional Component",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:ComponentName} = (${2}) => {",
      "\treturn (",
      "\t\t<div>$0</div>",
      "\t)",
      "}",
      "",
      "export default ${1:ComponentName}"
    ]
  },
  "Sequelize Model Definition": {
    "prefix": "seq-model-def",
    "description": "Sequelize model definition",
    "body": [
      "const Sequelize = require('sequelize')",
      "const db = require('${1:../db}')",
      "",
      "const ${2:ModelName} = db.define('${3:modelString}', {",
      "\t${4:columnName}: {",
      "\t\ttype: Sequelize.${5:dataType}",
      "\t}",
      "})",
      "",
      "module.exports = ${2:ModelName}"
    ]
  },
  "Sequelize Model Column": {
    "prefix": "seq-model-col",
    "description": "Sequelize model column",
    "body": [
      "\t${1:columnName}: {",
      "\t\ttype: Sequelize.${2:dataType},",
      "\t\tallowNull: false,",
      "\t\tvalidate: ${3:validation_data}",
      "\t},$0"
    ]
  },
  "Sequelize hasMany": {
    "prefix": "seq-hm",
    "description": "Sequelize hasMany association",
    "body": [
      "${1:ModelOne}.hasMany(${2:ModelTwo})",
      "${2:ModelTwo}.belongsTo(${1:ModelOne})",
      "${0}"
    ]
  },
  "Sequelize belongsTo": {
    "prefix": "seq-bt",
    "description": "Sequelize belongsTo association",
    "body": ["${1:ModelOne}.belongsTo(${2:ModelTwo})", "${0}"]
  },
  "Sequelize belongsToMany": {
    "prefix": "seq-btm",
    "description": "Sequelize belongsToMany association",
    "body": [
      "${1:ModelOne}.belongsToMany(${2:ModelTwo}, { through: ${3:ThroughTable})",
      "${2:ModelTwo}.belongsToMany(${1:ModelOne}, { through: ${3:ThroughTable})",
      "${0}"
    ]
  },
  "DataBase creation": {
    "prefix": "dbc",
    "description": "Database Creation with Sequelize",
    "body": [
      "const Sequelize = require('sequelize')",
      "",
      "const db = new Sequelize(",
      "\t'postgres://localhost:5432/${1:databaseName}',",
      "\t{logging: false}",
      ")",
      "module.exports= db"
    ]
  },
  "Redux Action Type and Creator": {
    "prefix": "redux-action-type-and-creator",
    "description": "Redux Action Type and Creator",
    "body": [
      "export const ${1:ACTION_NAME} = '${1:ACTION_NAME}'",
      "",
      "export const ${2:ActionCreatorName} = (${3:argument}) => ({",
      "\ttype: ${1:ACTION_NAME},",
      "\t${3:argument}",
      "})"
    ]
  },
  "Redux Thunk Creator": {
    "prefix": "redux-thunk",
    "description": "Redux Thunk Creator",
    "body": [
      "export const ${1:myThunkName} = () => async dispatch => {",
      "\ttry {",
      "\t\t${0}",
      "\t} catch (err) {",
      "\t\tconsole.error(err)",
      "\t}",
      "}"
    ]
  },
  "Redux Reducer": {
    "prefix": "redux-reducer",
    "description": "Redux Reducer",
    "body": [
      "export const ${1:myReducer} = (state = ${2:initialState}, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase ${3:ACTION_NAME}:",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t${0}",
      "\t\t\t}",
      "",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}"
    ]
  }
}
