{
  "Express Server Setup": {
    "prefix": "exp-server",
    "description": "Express: Server Setup",
    "body": [
      "const path = require('path')",
      "const express = require('express')",
      "const app = express()",
      "const PORT = ${1:8000}",
      "",
      "app.use(express.urlencoded({ extended: true }))",
      "app.use(express.json())",
      "",
      "app.use('/${2:api}', require('./${2:api}'))${0}",
      "",
      "// static file-serving middleware",
      "app.use(express.static(path.join(__dirname, '..', 'public')))",
      "",
      "// any remaining requests with an extension send 404",
      "app.use((req, res, next) => {",
      "\tif (path.extname(req.path).length) {",
      "\t\tconst err = new Error('Not found')",
      "\t\terr.status = 404",
      "\t\tnext(err)",
      "\t} else {",
      "\t\tnext()",
      "\t}",
      "})",
      "",
      "// sends index.html",
      "app.use('*', (req, res) => {",
      "\tres.sendFile(path.join(__dirname, '..', 'public/index.html'))",
      "})",
      "",
      "// error handling endware",
      "app.use((err, req, res, next) => {",
      "\tconsole.error(err)",
      "\tconsole.error(err.stack)",
      "\tres.status(err.status || 500).send(err.message || 'Internal server error.')",
      "})",
      "",
      "app.listen(PORT, () => console.log(`listening on port ${3:http://localhost}:${PORT}`))",
      ""
    ]
  },
  "Express Route": {
    "prefix": "exp-route",
    "description": "Express: Route",
    "body": [
      "router.${1:get}('/${2}', async (req, res, next) => {",
      "\ttry {",
      "\t\t${0}",
      "\t\tres.${3:json}()",
      "\t} catch (err) {",
      "\t\tnext(err)",
      "\t}",
      "})"
    ]
  },
  "React Class Component": {
    "prefix": "react-cc",
    "description": "React: Class Component",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:ComponentName} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>$0</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:ComponentName}"
    ]
  },
  "React Connected Class Component": {
    "prefix": "react-cc-con",
    "description": "React: Connected Class Component",
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:ComponentName} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapState = state => {",
      "\treturn {",
      "\t\t",
      "\t}",
      "}",
      "",
      "const mapDispatch = dispatch => {",
      "\treturn {",
      "\t\t",
      "\t}",
      "}",
      "",
      "export default connect(mapState, mapDispatch)(${1:ComponentName})",
      ""
    ]
  },
  "React Functional Component": {
    "prefix": "react-fc",
    "description": "React Functional Component",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:ComponentName} = (${2}) => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:ComponentName}"
    ]
  },
  "React Connected Func. Component": {
    "prefix": "react-fc-con",
    "description": "React Connected Functional Component",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:ComponentName} = (${2}) => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "const mapState = state => {",
      "\treturn {",
      "\t\t",
      "\t}",
      "}",
      "",
      "const mapDispatch = dispatch => {",
      "\treturn {",
      "\t\t",
      "\t}",
      "}",
      "",
      "export default connect(mapState, mapDispatch)(${1:ComponentName})",
      ""
    ]
  },
  "React componentDidMount": {
    "prefix": "cdm",
    "description": "React: componentDidMount()",
    "body": ["componentDidMount() {", "\t$0", "}", ""]
  },
  "React componentWillUnmount": {
    "prefix": "cwun",
    "description": "React: componentWillUnmount()",
    "body": ["componentWillUnmount() {", "\t$0", "}", ""]
  },
  "React componentDidUpdate": {
    "prefix": "cdup",
    "description": "React: componentDidUpdate()",
    "body": ["componentDidUpdate(prevState, prevProps) {", "\t$0", "}", ""]
  },
  "React UNSAFE_componentWillMount": {
    "prefix": "cwm",
    "description": "React: componentWillMount()",
    "body": [
      "// This lifecycle is being deprecated and should be avoided",
      "UNSAFE_componentWillMount() {",
      "\t$0",
      "}",
      ""
    ]
  },
  "Sequelize Model": {
    "prefix": "seq-model",
    "description": "Sequelize: Model Definition",
    "body": [
      "const Sequelize = require('sequelize')",
      "const db = require('${1:../db}')",
      "",
      "const ${2:ModelName} = db.define('${3:modelString}', {",
      "\t${4:columnName}: {",
      "\t\ttype: Sequelize.${5:dataType}",
      "\t},",
      "",
      "})",
      "",
      "module.exports = ${2:ModelName}",
      ""
    ]
  },
  "Sequelize Column": {
    "prefix": "seq-col",
    "description": "Sequelize: Model Column",
    "body": [
      "\t${1:columnName}: {",
      "\t\ttype: Sequelize.${2:dataType},",
      "\t\tallowNull: false,",
      "\t\tvalidate: ${3:validation_data}",
      "\t},$0"
    ]
  },
  "Sequelize hasMany": {
    "prefix": "seq-hm",
    "description": "Sequelize: hasMany",
    "body": [
      "${1:ModelOne}.hasMany(${2:ModelTwo})",
      "${2:ModelTwo}.belongsTo(${1:ModelOne})",
      "${0}"
    ]
  },
  "Sequelize belongsTo": {
    "prefix": "seq-bt",
    "description": "Sequelize: belongsTo",
    "body": ["${1:ModelOne}.belongsTo(${2:ModelTwo})", "${0}"]
  },
  "Sequelize belongsToMany": {
    "prefix": "seq-btm",
    "description": "Sequelize: belongsToMany",
    "body": [
      "${1:ModelOne}.belongsToMany(${2:ModelTwo}, { through: ${3:ThroughTable})",
      "${2:ModelTwo}.belongsToMany(${1:ModelOne}, { through: ${3:ThroughTable})",
      "${0}"
    ]
  },
  "DataBase creation": {
    "prefix": "dbc",
    "description": "Database Creation with Sequelize",
    "body": [
      "const Sequelize = require('sequelize')",
      "",
      "const db = new Sequelize(",
      "\t'postgres://localhost:5432/${1:databaseName}',",
      "\t{",
      "\t\tlogging: false",
      "\t\toperatorsAliases: false",
      "\t}",
      ")",
      "",
      "module.exports = db"
    ]
  },
  "Redux Action Type and Creator": {
    "prefix": "redux-atc",
    "description": "Redux: Action Type and Creator",
    "body": [
      "export const ${1:ACTION_NAME} = '${1:ACTION_NAME}'",
      "",
      "export const ${2:ActionCreatorName} = (${3:argument}) => ({",
      "\ttype: ${1:ACTION_NAME},",
      "\t${3:argument}",
      "})"
    ]
  },
  "Redux Thunk Creator": {
    "prefix": "redux-thk",
    "description": "Redux: Thunk Creator",
    "body": [
      "export const ${1:myThunkName} = () => async dispatch => {",
      "\ttry {",
      "\t\t${0}",
      "\t} catch (err) {",
      "\t\tconsole.error(err)",
      "\t}",
      "}"
    ]
  },
  "Redux Reducer": {
    "prefix": "redux-red",
    "description": "Redux: Reducer",
    "body": [
      "export const ${1:myReducer} = (state = ${2:initialState}, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase ${3:ACTION_NAME}:",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t${0}",
      "\t\t\t}",
      "",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}"
    ]
  }
}
